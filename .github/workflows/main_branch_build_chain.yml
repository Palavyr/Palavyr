name: Main Build and Push
on:
  push:
    branches:
      - main

jobs:
  generate-build-number:
    runs-on: ubuntu-latest
    name: Create next build number

    # Major Release Version
    env:
      MAJOR_VERSION: "0"

    # Lots of useful bits of information to use here
    # env:
    #   GITHUB_CONTEXT: ${{ toJson(github) }}

    outputs:
      version: ${{ steps.buildversion.outputs.version}}

    steps:
      - name: Generate build number
        id: buildnumber
        uses: einaregilsson/build-number@v3
        with:
          token: ${{secrets.github_token}}

      - name: Set Build Version
        id: buildversion
        run: |
          rawVersion="${{ env.MAJOR_VERSION }}.${{ steps.buildnumber.outputs.build_number }}"
          echo ${rawVersion}
          echo ::set-output name=version::$(echo ${rawVersion} | tr "/" "-")

  test-and-build-server:
    name: Server
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [generate-build-number]

    steps:
      - name: Setup dotnet
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: 6.x.x

      - name: What I think the version number is
        run: |
          echo ==========================
          echo ${{ needs.generate-build-number.outputs.version }}
          echo ==========================

      - name: Checkout
        uses: actions/checkout@v3

      - name: Nuke Build üèó
        id: build
        shell: bash
        run: |
          chmod 777 ./build.ci.sh
          ./build.ci.sh
        env:
          Version: ${{ needs.generate-build-number.outputs.version }}

      # - name: Install Octopus CLI üêô
      #   uses: OctopusDeploy/install-octopus-cli-action@v1
      #   with:
      #     version: latest

      # - name: Push a package to Octopus Deploy üêô
      #   uses: OctopusDeploy/push-package-action@v2
      #   env:
      #     OCTOPUS_API_KEY: ${{ secrets.OCTOPUS_DEPLOY_API_KEY }}
      #     OCTOPUS_HOST: ${{ secrets.OCTOPUS_DEPLOY_URL }}
      #     OCTOPUS_SPACE: "Spaces-2"
      #   with:
      #     packages: ${{ steps.build.outputs.packages_to_push }}

      - uses: mr-smithers-excellent/docker-build-push@v5
        name: Build & push Server Docker image
        with:
          image: paulegradie/palavyr
          tags: server-latest, server-${{ needs.generate-build-number.outputs.version }}
          registry: docker.io
          dockerfile: ./server/Dockerfile
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - uses: mr-smithers-excellent/docker-build-push@v5
        name: Build & push Migrator Docker image
        with:
          image: paulegradie/palavyr
          tags: migrator-latest, migrator-${{ needs.generate-build-number.outputs.version }}
          registry: docker.io
          dockerfile: ./server/Dockerfile.Migrator
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

  build-frontend:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    name: Frontend
    needs: [generate-build-number]

    steps:
      - name: Set up node
        uses: actions/setup-node@v3
        with:
          node-version: 12

      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Move into ui dir and install
        run: |
          cd ./ui
          npm ci

      - name: Move into ui dir and Build
        run: |
          cd ./ui
          npm run build

      - name: Move into ui dir and Zip the distribution
        run: |
          cd ./ui
          zip -r palavyr-frontend.${{ needs.generate-build-number.outputs.version }}.zip ./dist-frontend
          mv palavyr-frontend.${{ needs.generate-build-number.outputs.version }}.zip ${{ github.workspace }}

      # TODO: uncomment when productionizing
      # - name: Install Octopus CLI üêô
      #   uses: OctopusDeploy/install-octopus-cli-action@v1
      #   with:
      #     version: latest

      # - name: Push a package to Octopus Deploy üêô
      #   uses: OctopusDeploy/push-package-action@v2
      #   env:
      #     OCTOPUS_API_KEY: ${{ secrets.OCTOPUS_DEPLOY_API_KEY }}
      #     OCTOPUS_HOST: ${{ secrets.OCTOPUS_DEPLOY_URL }}
      #     OCTOPUS_SPACE: "Spaces-2"
      #   with:
      #     packages: palavyr-frontend.${{ needs.generate-build-number.outputs.version }}.zip

      - uses: mr-smithers-excellent/docker-build-push@v5
        name: Build & push Docker image
        with:
          image: paulegradie/palavyr
          tags: frontend-latest, frontend-${{ needs.generate-build-number.outputs.version }}
          dockerfile: ./ui/docker-frontend/Dockerfile
          registry: docker.io
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

  build-widget:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    name: Widget
    needs: [generate-build-number]

    steps:
      - name: Set up node
        uses: actions/setup-node@v3
        with:
          node-version: 12

      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Move into ui dir and install
        run: |
          cd ./ui
          npm ci

      - name: Move into ui dir and Build
        run: |
          cd ./ui
          npm run build-widget

      - name: Move into ui dir and Zip the distribution
        run: |
          cd ./ui
          ls -lath
          zip -r palavyr-widget.${{ needs.generate-build-number.outputs.version }}.zip ./dist-widget
          mv palavyr-widget.${{ needs.generate-build-number.outputs.version }}.zip ${{ github.workspace }}

      # TODO: Uncomment when productionizing
      # - name: Install Octopus CLI üêô
      #   uses: OctopusDeploy/install-octopus-cli-action@v1
      #   with:
      #     version: latest

      # - name: Push a package to Octopus Deploy üêô
      #   uses: OctopusDeploy/push-package-action@v2
      #   env:
      #     OCTOPUS_API_KEY: ${{ secrets.OCTOPUS_DEPLOY_API_KEY }}
      #     OCTOPUS_HOST: ${{ secrets.OCTOPUS_DEPLOY_URL }}
      #     OCTOPUS_SPACE: "Spaces-2"
      #   with:
      #     packages: palavyr-widget.${{ needs.generate-build-number.outputs.version }}.zip

      - uses: mr-smithers-excellent/docker-build-push@v5
        name: Build & push to Docker
        with:
          image: paulegradie/palavyr
          tags: widget-latest, widget-${{ needs.generate-build-number.outputs.version }}
          dockerfile: ./ui/docker-widget/Dockerfile
          registry: docker.io
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

  build-pdf-server:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    name: Build pdf-server for ci
    needs: [generate-build-number]

    steps:
      - name: Set up node
        uses: actions/setup-node@v3
        with:
          node-version: 12

      - name: Checkout repo
        uses: actions/checkout@v3

      - uses: mr-smithers-excellent/docker-build-push@v5
        name: Build & push to Docker
        with:
          image: paulegradie/palavyr
          tags: pdf-server-latest, pdf-server-${{ needs.generate-build-number.outputs.version }}
          dockerfile: ./pdf/Dockerfile.prod
          registry: docker.io
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

# TODO: Uncomment when productionizing
# create-release:
#   runs-on: ubuntu-latest
#   needs:
#     [test-and-build-server, build-frontend, build-widget, build-pdf-server]
#   steps:
#     - name: Install Octopus CLI üêô
#       uses: OctopusDeploy/install-octopus-cli-action@v1
#       with:
#         version: latest

#     - name: Create a release in Octopus Deploy üêô
#       uses: OctopusDeploy/create-release-action@v2
#       env:
#         OCTOPUS_API_KEY: ${{ secrets.OCTOPUS_DEPLOY_API_KEY  }}
#         OCTOPUS_HOST: ${{ secrets.OCTOPUS_DEPLOY_URL }}
#         OCTOPUS_SPACE: "Spaces-2"
#       with:
#         project: "Palavyr"
