name: Main Build and Push
on:
  push:
    branches:
      - main

jobs:
  generate-build-number:
    runs-on: ubuntu-latest
    name: Create next build number

    # Major Release Version
    env:
      MAJOR_VERSION: "0"

    # Lots of useful bits of information to use here
    # env:
    #   GITHUB_CONTEXT: ${{ toJson(github) }}

    outputs:
      version: ${{ steps.buildversion.outputs.version}}

    steps:
      - name: Generate build number
        id: buildnumber
        uses: einaregilsson/build-number@v3
        with:
          token: ${{secrets.github_token}}

      - name: Set Build Version
        id: buildversion
        run: |
          rawVersion="${{ env.MAJOR_VERSION }}.${{ steps.buildnumber.outputs.build_number }}"
          echo ${rawVersion}
          echo ::set-output name=version::$(echo ${rawVersion} | tr "/" "-")

  build-and-test-server:
    name: Server
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [generate-build-number]

    env:
      STRIPE_API_KEY: ${{secrets.Palavyr_STRIPE__SecretKey}}
      STRIPE_DEVICE_NAME: ${{secrets.Palavyr_STRIPE__DEVICE_NAME}}

      Palavyr_AWS__AccessKey: ${{secrets.Palavyr_AWS__AccessKey}}
      Palavyr_AWS__SecretKey: ${{secrets.Palavyr_AWS__SecretKey}}
      Palavyr_AWS__Region: ${{secrets.Palavyr_AWS__Region}}
      Palavyr_ConnectionString: ${{secrets.Palavyr_ConnectionString}}
      Palavyr_Environment: ${{secrets.Palavyr_Environment}}
      Palavyr_JWT__SecretKey: ${{secrets.Palavyr_JWT__SecretKey}}
      Palavyr_STRIPE__SecretKey: ${{secrets.Palavyr_STRIPE__SecretKey}}
      Palavyr_AWS__UserDataBucket: ${{secrets.Palavyr_AWS__UserDataBucket}}
      Palavyr_AWS__AwsS3ServiceUrl: ${{ secrets.Palavyr_AWS__AwsS3ServiceUrl }}
      Palavyr_AWS__AwsSESServiceUrl: ${{ secrets.Palavyr_AWS__AwsSESServiceUrl }}

    steps:
      - name: Setup dotnet
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: 6.x.x

      - name: What I think the version number is
        run: |
          echo ==========================
          echo ${{ needs.generate-build-number.outputs.version }}
          echo ==========================

      - name: Checkout
        uses: actions/checkout@v3

      - name: Restore dependencies
        run: |
          cd ./server
          dotnet restore

      - name: Build
        run: |
          cd ./server
          dotnet build --no-restore

      - name: Publish
        run: |
          cd ./server
          vers=${{ needs.generate-build-number.outputs.version }}
          dotnet publish -c Release /p:Version=${vers} --output ../server_build

      - name: Start Docker environment
        run: docker compose -f ./docker-compose.ci.yml up -d

      - name: Pure Tests
        run: dotnet test ./server_build/Palavyr.PureTests.dll --verbosity normal --no-restore

      - name: Component Tests
        run: dotnet test ./server_build/Palavyr.ComponentTests.dll --verbosity normal --no-restore

      - name: Integration Tests
        run: dotnet test ./server_build/Palavyr.IntegrationTests.dll --verbosity normal --no-restore

      - name: Delete the test dlls
        run: |
          ls -lath ./server_build
          rm -rf ./server_build/Palavyr.IntegrationTests*
          rm -rf ./server_build/Palavyr.ComponentTests*
          rm -rf ./server_build/Palavyr.PureTests*
          rm -rf ./server_build/Test.Common*

      - name: Zip server into a package
        run: zip -r palavyr-server.${{ needs.generate-build-number.outputs.version }}.zip ./server_build

      - name: Install Octopus CLI üêô
        uses: OctopusDeploy/install-octopus-cli-action@v1
        with:
          version: latest

      - name: Push a package to Octopus Deploy üêô
        uses: OctopusDeploy/push-package-action@v2
        env:
          OCTOPUS_API_KEY: ${{ secrets.OCTOPUS_DEPLOY_API_KEY }}
          OCTOPUS_HOST: ${{ secrets.OCTOPUS_DEPLOY_URL }}
          OCTOPUS_SPACE: "Spaces-2"
        with:
          packages: palavyr-server.${{ needs.generate-build-number.outputs.version }}.zip

      - uses: mr-smithers-excellent/docker-build-push@v5
        name: Build & push Docker image
        with:
          image: palavyr/palavyr-server
          tags: latest, ${{ needs.generate-build-number.outputs.version }}
          registry: ${{ secrets.ECR_REGISTRY }}
          dockerfile: ./server/Dockerfile
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ECR_CONTROL_Access_Key_Id }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_ECR_CONTROL_Secret_Key_Id }}
          Palavyr_AWS__AccessKey: ${{secrets.Palavyr_AWS__AccessKey}}
          Palavyr_AWS__SecretKey: ${{secrets.Palavyr_AWS__SecretKey}}
          Palavyr_AWS__Region: ${{secrets.Palavyr_AWS__Region}}
          Palavyr_ConnectionString: ${{secrets.Palavyr_ConnectionString}}
          Palavyr_Environment: ${{secrets.Palavyr_Environment}}
          Palavyr_JWT__SecretKey: ${{secrets.Palavyr_JWT__SecretKey}}
          Palavyr_STRIPE__SecretKey: ${{secrets.Palavyr_STRIPE__SecretKey}}
          Palavyr_AWS__UserDataBucket: ${{secrets.Palavyr_AWS__UserDataBucket}}
          Palavyr_AWS__AwsS3ServiceUrl: ${{ secrets.Palavyr_AWS__AwsS3ServiceUrl }}
          Palavyr_AWS__AwsSESServiceUrl: ${{ secrets.Palavyr_AWS__AwsSESServiceUrl }}

  build-frontend:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    name: Frontend
    needs: [generate-build-number]

    steps:
      - name: Set up node
        uses: actions/setup-node@v3
        with:
          node-version: 12

      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Move into ui dir and install
        run: |
          cd ./ui
          npm ci

      - name: Move into ui dir and Build
        run: |
          cd ./ui
          npm run build

      - name: Move into ui dir and Zip the distribution
        run: |
          cd ./ui
          zip -r palavyr-frontend.${{ needs.generate-build-number.outputs.version }}.zip ./dist-frontend
          mv palavyr-frontend.${{ needs.generate-build-number.outputs.version }}.zip ${{ github.workspace }}

      - name: Install Octopus CLI üêô
        uses: OctopusDeploy/install-octopus-cli-action@v1
        with:
          version: latest
      - name: Push a package to Octopus Deploy üêô
        uses: OctopusDeploy/push-package-action@v2
        env:
          OCTOPUS_API_KEY: ${{ secrets.OCTOPUS_DEPLOY_API_KEY }}
          OCTOPUS_HOST: ${{ secrets.OCTOPUS_DEPLOY_URL }}
          OCTOPUS_SPACE: "Spaces-2"
        with:
          packages: palavyr-frontend.${{ needs.generate-build-number.outputs.version }}.zip

      - uses: mr-smithers-excellent/docker-build-push@v5
        name: Build & push Docker image
        with:
          image: palavyr/palavyr-frontend
          tags: latest, ${{ needs.generate-build-number.outputs.version }}
          dockerfile: ./ui/docker-frontend/Dockerfile
          registry: ${{ secrets.ECR_REGISTRY }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ECR_CONTROL_Access_Key_Id }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_ECR_CONTROL_Secret_Key_Id }}

  build-widget:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    name: Widget
    needs: [generate-build-number]

    steps:
      - name: Set up node
        uses: actions/setup-node@v3
        with:
          node-version: 12

      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Move into ui dir and install
        run: |
          cd ./ui
          npm ci

      - name: Move into ui dir and Build
        run: |
          cd ./ui
          npm run build-widget

      - name: Move into ui dir and Zip the distribution
        run: |
          cd ./ui
          ls -lath
          zip -r palavyr-widget.${{ needs.generate-build-number.outputs.version }}.zip ./dist-widget
          mv palavyr-widget.${{ needs.generate-build-number.outputs.version }}.zip ${{ github.workspace }}

      - name: Install Octopus CLI üêô
        uses: OctopusDeploy/install-octopus-cli-action@v1
        with:
          version: latest

      - name: Push a package to Octopus Deploy üêô
        uses: OctopusDeploy/push-package-action@v2
        env:
          OCTOPUS_API_KEY: ${{ secrets.OCTOPUS_DEPLOY_API_KEY }}
          OCTOPUS_HOST: ${{ secrets.OCTOPUS_DEPLOY_URL }}
          OCTOPUS_SPACE: "Spaces-2"
        with:
          packages: palavyr-widget.${{ needs.generate-build-number.outputs.version }}.zip

      - uses: mr-smithers-excellent/docker-build-push@v5
        name: Build & push to Docker
        with:
          image: palavyr/palavyr-widget
          tags: latest, ${{ needs.generate-build-number.outputs.version }}
          dockerfile: ./ui/docker-widget/Dockerfile
          registry: ${{ secrets.ECR_REGISTRY }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ECR_CONTROL_Access_Key_Id }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_ECR_CONTROL_Secret_Key_Id }}

  build-pdf-server:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    name: Build pdf-server
    needs: [generate-build-number]

    steps:
      - name: Set up node
        uses: actions/setup-node@v3
        with:
          node-version: 12

      - name: Checkout repo
        uses: actions/checkout@v3

      - uses: mr-smithers-excellent/docker-build-push@v5
        name: Build & push to Docker
        with:
          image: palavyr/palavyr-pdf-server
          tags: latest, ${{ needs.generate-build-number.outputs.version }}
          dockerfile: ./pdf/Dockerfile.ci
          registry: ${{ secrets.ECR_REGISTRY }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ECR_CONTROL_Access_Key_Id }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_ECR_CONTROL_Secret_Key_Id }}

  create-release:
    runs-on: ubuntu-latest
    needs:
      [build-and-test-server, build-frontend, build-widget, build-pdf-server]
    steps:
      - name: Install Octopus CLI üêô
        uses: OctopusDeploy/install-octopus-cli-action@v1
        with:
          version: latest

      - name: Create a release in Octopus Deploy üêô
        uses: OctopusDeploy/create-release-action@v2
        env:
          OCTOPUS_API_KEY: ${{ secrets.OCTOPUS_DEPLOY_API_KEY  }}
          OCTOPUS_HOST: ${{ secrets.OCTOPUS_DEPLOY_URL }}
          OCTOPUS_SPACE: "Spaces-2"
        with:
          project: "Palavyr"
