name: Build and Run Tests on pull request
on:
  pull_request:
    branches:
      - main

jobs:
  build-frontend:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    name: Build frontend

    steps:
      - name: Set up node
        uses: actions/setup-node@v3
        with:
          node-version: 12

      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Move into ui
        run: |
          cd ./ui
          npm install

      - name: Build
        run: |
          cd ./ui
          npm run build

      - name: Move up
        run: |
          cd ./ui
          mv ./dist-frontend ${{ github.workspace }}

      - name: Zip the distribution
        run: |
          cd ./ui
          zip -r ./dist-frontend palavyr-frontend.{VERSION}.zip

  # build-and-test-server:
  #   name: Build and test server
  #   runs-on: ubuntu-latest
  #   timeout-minutes: 15
  #   env:
  #     STRIPE_API_KEY: ${{secrets.STRIPE_API_KEY}}
  #     STRIPE_DEVICE_NAME: Palavyr

  #   steps:
  #     - name: Generate build number
  #       id: buildnumber
  #       uses: einaregilsson/build-number@v3
  #       with:
  #         token: ${{secrets.github_token}}

  #     - name: Setup dotnet
  #       uses: actions/setup-dotnet@v2
  #       with:
  #         dotnet-version: 6.0.x

  #     - name: Checkout
  #     - uses: actions/checkout@v3

  #     - name: Verify commit exists in origin/main
  #       run: echo "Going to use ${{ steps.buildnumber.outputs.build_number }} for the package Id."

  #     - name: Set VERSION variable from tag
  #       run: echo "0.1.${{ steps.buildnumber.outputs.build_number }}" >> $GITHUB_ENV

  #     - name: Build
  #       run: dotnet build ./source/server/Palavyr.API/Palavyr.API.csproj --configuration Release /p:Version=${VERSION}-${GITHUB_REF##*/} --output ./server

  #     - name: Start Docker environment
  #       run: docker compose up -d -f docker-compose.ci.yml

  #     - name: Test
  #       run: dotnet test ./server/Palavyr.API/Palavyr.API.csproj --verbosity normal

  #     - name: Delete the test dlls
  #       run: rm ./server/Palavyr.IntegrationTest.dll ./server/Palavyr.ComponentTests.dll ./server/Palavyr.PureTests.dll

  #     - name: Zip server into a packaged
  #       run: zip ./server palavyr.server.{VERSION}.zip

  # build-widget:
  #   runs-on: ubuntu-latest
  #   timeout-minutes: 15
  #   name: Build widget

  #   steps:
  #     - uses: actions/checkout@v3
  #     - uses: actions/setup-node@v3

  #     - name: Install and build
  #     - run: |
  #         cd ./ui/src
  #         npm install
  #         npm run build
  #         mv ./dist-widget ../..

  #     - name: Zip the distribution
  #     - run: zip ./dist-widget palavyr-widget.{VERSION}.zip
